#include "QImage_Q.hpp"
/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/
QImage_Q::QImage_Q()
{
	this->init();
}
/*-------------------------------------*/
/**
*
*
*/
/*-------------------------------------*/
QImage_Q::~QImage_Q()
{
	this->destory();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QImage_Q::init()
{
	this->clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QImage_Q::destory()
{
	this->clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QImage_Q::clear()
{
	QMutexLocker locker(&mutex);
	mQ.clear();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
QImage QImage_Q::getQImage()
{
	QImage img_t;

	QMutexLocker locker(&mutex);
	
	if (mQ.isEmpty()) {
		
	}else{
		img_t = mQ.dequeue();
	}

	return img_t;
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
void QImage_Q::setQImage(const QImage _img)
{
	QMutexLocker locker(&mutex);

	if ((_img.width()+_img.height())!=0){
			mQ.enqueue(_img);
	}	
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/
int QImage_Q::QueueSize()
{
	QMutexLocker locker(&mutex);
	return	mQ.size();
}
/*-------------------------------------*/
/**
*
*/
/*-------------------------------------*/